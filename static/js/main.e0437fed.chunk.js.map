{"version":3,"sources":["components/ItemModal.js","components/ListItem.js","components/TodoList.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["ItemModal","props","useState","todo","setTodo","list","setList","modal","setModal","toggle","onChange","e","state","target","value","Button","color","style","width","onClick","title","Modal","isOpen","ModalHeader","ModalBody","Form","onSubmit","preventDefault","addItem","FormGroup","Label","for","Input","type","name","id","placeholder","option","lists","map","key","block","ListItem","handleFinished","removeItem","toggleUpdateInput","onUpdateSubmit","handleUpdateValue","text","updateValue","checked","openUpdateText","ListGroup","Item","className","dragobj","_id","variant","size","padding","lineHeight","stopPropagation","TodoList","items","setItems","setOpenUpdateText","setUpdateValue","classList","remove","closest","setTimeout","filter","item","updateItem","input","updates","handleCheckbox","useEffect","todos","localStorage","getItem","JSON","parse","margin","textAlign","selectedList","marginBottom","toLowerCase","uuid","setItem","stringify","NavbarComponent","collapsed","setCollapsed","todoList","setLists","Navbar","light","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","el","NavItem","NavLink","selectList","textContent","App","setSelectedList","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e0437fed.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input } from 'reactstrap';\r\n\r\nconst ItemModal = (props) => {\r\n  const [todo, setTodo] = useState('');\r\n  const [list, setList] = useState('Välj lista');\r\n  const [modal, setModal] = useState(false);\r\n\r\n  function toggle() {\r\n    setModal(!modal);\r\n  }\r\n\r\n  function onChange(e, state) {\r\n    state(e.target.value);\r\n  }\r\n\r\n  function onSubmit(e) {\r\n    e.preventDefault();\r\n    if (props.title === 'Add list') {\r\n      props.addItem(todo, list);\r\n      setTodo('');\r\n      toggle();\r\n    }\r\n    if (list === 'Välj lista' || todo === '') return;\r\n    props.addItem(todo, list);\r\n    setTodo('');\r\n    toggle();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        color=\"info\"\r\n        style={{ width: '100%' }}\r\n        onClick={toggle}\r\n      >\r\n        {props.title}\r\n      </Button>\r\n\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}>{props.title}</ModalHeader>\r\n        <ModalBody>\r\n          <Form onSubmit={onSubmit}>\r\n\r\n            <FormGroup>\r\n\r\n              <Label for=\"todo\">Todo</Label>\r\n              <Input\r\n                type=\"todo\"\r\n                name=\"name\"\r\n                id=\"todo\"\r\n                value={todo}\r\n                placeholder={props.title}\r\n                onChange={(e) => onChange(e, setTodo)}\r\n              ></Input>\r\n\r\n            </FormGroup>\r\n\r\n            {props.option === \"true\" ?\r\n              <FormGroup>\r\n                <Label for=\"exampleSelect\">Select List</Label>\r\n                <Input\r\n                  onChange={(e) => onChange(e, setList)}\r\n                  type=\"select\"\r\n                  name=\"select\"\r\n                  id=\"exampleSelect\"\r\n                >\r\n                  <option>Välj lista</option>\r\n                  {props.lists.map(list => {\r\n                    return (\r\n                      <option key={list.title}>{list.title}</option>\r\n                    )\r\n                  })}\r\n                </Input>\r\n              </FormGroup>\r\n\r\n              : null}\r\n\r\n            <Button\r\n              color=\"info\"\r\n              block\r\n            >\r\n              {props.title}\r\n            </Button>\r\n\r\n          </Form>\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ItemModal;\r\n","import React from 'react';\r\nimport { ListGroup, Button } from 'react-bootstrap';\r\nimport { Input, Form } from 'reactstrap';\r\n\r\nconst ListItem = (props) => {\r\n\r\n  const { handleFinished, removeItem, toggleUpdateInput, onUpdateSubmit, handleUpdateValue, id, text, checked, list, updateValue, openUpdateText } = props;\r\n\r\n  return (\r\n    <ListGroup.Item\r\n      key={id}\r\n      className=\"drag-box\"\r\n      dragobj=\"0\"\r\n      _id={id}\r\n      onClick={(e) => handleFinished(e.target, id)}\r\n    >\r\n\r\n      <Button\r\n        className=\"remove-btn remove-transition\"\r\n        variant=\"danger\"\r\n        size=\"sm\"\r\n        onClick={(e) => removeItem(e, id)}\r\n      >\r\n        <i className=\"material-icons before-remove remove-transition\">delete</i>\r\n      </Button>\r\n\r\n      <Button\r\n        variant=\"info\"\r\n        size=\"sm\"\r\n        onClick={(e) => toggleUpdateInput(e, text, id)}\r\n      >\r\n        <i className=\"material-icons\">edit</i>\r\n      </Button>\r\n\r\n      <span style={{ padding: \"0 30px\", lineHeight: \"2.4rem\" }}>{text}</span>\r\n\r\n      {openUpdateText === id ?\r\n        <Form\r\n          className=\"form\"\r\n          onSubmit={(e) => onUpdateSubmit(e, id)}\r\n        >\r\n          <Input\r\n            value={updateValue}\r\n            type=\"text\"\r\n            name=\"todo\"\r\n            placeholder=\"Update todo\"\r\n            onClick={(e) => e.stopPropagation()}\r\n            onChange={(e) => handleUpdateValue(e)}\r\n          ></Input>\r\n        </Form>\r\n\r\n        : null}\r\n\r\n    </ListGroup.Item>\r\n  );\r\n}\r\n\r\nexport default ListItem;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport uuid from 'uuid';\r\n\r\nimport './styles_todolist.css';\r\nimport InputModal from './ItemModal';\r\nimport ListItem from './ListItem';\r\n\r\nconst TodoList = (props) => {\r\n  const [items, setItems] = useState([]);\r\n  const [openUpdateText, setOpenUpdateText] = useState('');\r\n  const [updateValue, setUpdateValue] = useState('');\r\n\r\n  // Load todos from localstorage\r\n  useEffect(() => {\r\n    const todos = localStorage.getItem('todo');\r\n    if (todos) {\r\n      setItems(JSON.parse(todos));\r\n    } else {\r\n      setItems([]);\r\n    }\r\n  }, []);\r\n\r\n\r\n  // Add a new todo item\r\n  function addItem(text, list) {\r\n    if (text) {\r\n      let input = { id: uuid(), list: list.toLowerCase(), text, checked: '' }\r\n      setItems(items => [...items, input]);\r\n      localStorage.setItem('todo', JSON.stringify([...items, input]));\r\n    }\r\n  }\r\n\r\n\r\n  // Remove item class and state\r\n  function removeItem(e, id) {\r\n    e.target.classList.remove('remove-transition');\r\n    e.target.closest('button').classList.remove('remove-transition');\r\n    e.stopPropagation();\r\n    setTimeout(() => {\r\n      setItems(items =>\r\n        items.filter(item => item.id !== id)\r\n      )\r\n    }, 500);\r\n  }\r\n\r\n\r\n  // Handle update state\r\n  function handleUpdateValue(e) {\r\n    setUpdateValue(e.target.value);\r\n  }\r\n  // toggle input element for right todo\r\n  function toggleUpdateInput(e, text, id) {\r\n    e.stopPropagation();\r\n    // if no input is open\r\n    if (openUpdateText === '') {\r\n      setUpdateValue(text)\r\n      setOpenUpdateText(id);\r\n    }\r\n    // close input on same todo item\r\n    else if (openUpdateText === id) {\r\n      setOpenUpdateText('');\r\n      updateItem(id, updateValue);\r\n      setOpenUpdateText('');\r\n      setUpdateValue('');\r\n    }\r\n    else {\r\n      setOpenUpdateText(id);\r\n      setUpdateValue(text)\r\n    }\r\n  }\r\n  // Update item state\r\n  function updateItem(id, input) {\r\n    let updates = items.map(item => {\r\n      if (item.id === id) {\r\n        item.text = input;\r\n      }\r\n      return item;\r\n    });\r\n    setItems([...updates]);\r\n  }\r\n  // handle update submit\r\n  function onUpdateSubmit(e, id) {\r\n    e.preventDefault();\r\n    updateItem(id, updateValue);\r\n    setOpenUpdateText('');\r\n    setUpdateValue('');\r\n  }\r\n\r\n\r\n\r\n  // handle finish state\r\n  function handleCheckbox(id) {\r\n    let updates = items.map(item => {\r\n      if (item.id === id) {\r\n        item.checked = !item.checked;\r\n      }\r\n      return item;\r\n    });\r\n    setItems([...updates]);\r\n  }\r\n  // handle finish classlist\r\n  function handleFinished(e, id) {\r\n    e.closest(\".list-group-item\").classList.toggle(\"finished\")\r\n    handleCheckbox(id)\r\n  }\r\n\r\n  return (\r\n    <div style={{ margin: '1rem auto', padding: \"0 20px\" }}>\r\n\r\n      <h2 style={{ textAlign: 'center' }}>{props.selectedList}</h2>\r\n\r\n      <ListGroup style={{ marginBottom: '1rem' }}>\r\n\r\n        <div className=\"todo-list drag-container\">\r\n          {items.map(({ id, text, checked, list }) => {\r\n            if (props.selectedList.toLowerCase() !== list) {\r\n              return (null);\r\n            }\r\n            return (\r\n              <ListItem \r\n                handleFinished = {handleFinished}\r\n                removeItem = {removeItem}\r\n                toggleUpdateInput = {toggleUpdateInput}\r\n                onUpdateSubmit = {onUpdateSubmit}\r\n                handleUpdateValue = {handleUpdateValue}\r\n                openUpdateText = {openUpdateText}\r\n                updateValue = {updateValue}\r\n                id = {id}\r\n                text = {text}\r\n                checked = {checked}\r\n                list = {list}\r\n              /> \r\n            )\r\n          }\r\n          )}\r\n        </div>\r\n\r\n      </ListGroup>\r\n\r\n      <InputModal\r\n        addItem={addItem}\r\n        title=\"Add todo\"\r\n        option=\"true\"\r\n        selectedList={props.selectedList}\r\n        lists={props.lists}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\r\nimport ItemModal from './ItemModal';\r\nimport uuid from 'uuid';\r\n\r\nimport './styles_navbar.css';\r\n\r\nconst NavbarComponent = (props) => {\r\n  const [collapsed, setCollapsed] = useState(true);\r\n  const [list, setList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const todoList = localStorage.getItem('todoList');\r\n    if (todoList) {\r\n      setList(JSON.parse(todoList));\r\n    } else {\r\n      setList([]);\r\n    }\r\n  }, [setList]);\r\n\r\n  useEffect(() => {\r\n    props.setLists(list)\r\n  }, [collapsed, props, list]);\r\n\r\n  function addItem(title) {\r\n    if (title) {\r\n      let input = { id: uuid(), title }\r\n      setList(list => [...list, input]);\r\n      localStorage.setItem('todoList', JSON.stringify([...list, input]))\r\n    }\r\n  }\r\n\r\n  const toggleNavbar = () => setCollapsed(!collapsed);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"faded\" light>\r\n        <NavbarBrand className=\"mr-auto\">Todo List</NavbarBrand>\r\n        <div className=\"mr-2\">\r\n          <ItemModal\r\n            title=\"Add list\"\r\n            addItem={addItem}\r\n            option=\"false\"\r\n          />\r\n        </div>\r\n        <NavbarToggler onClick={toggleNavbar} className=\"mr-2\" />\r\n        <Collapse isOpen={!collapsed} navbar>\r\n          <Nav navbar>\r\n              {list.map(el => {\r\n                return (\r\n                  <NavItem>\r\n                    <NavLink\r\n                      onClick={(e) => props.selectList(e.target.textContent)}\r\n                      key={el.id}\r\n                    >\r\n                      {el.title}\r\n                    </NavLink>\r\n                  </NavItem>\r\n                )\r\n              })}\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavbarComponent;","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container } from 'reactstrap';\r\n\r\nimport TodoList from './components/TodoList';\r\nimport Navbar from './components/Navbar';\r\n\r\nfunction App() {\r\n  const [selectedList, setSelectedList] = useState('');\r\n  const [lists, setLists] = useState([]);\r\n  return (\r\n    <div className=\"App\">\r\n      <Container>\r\n        <Navbar\r\n          selectList={setSelectedList}\r\n          setLists={setLists}\r\n        />\r\n        <TodoList\r\n          selectedList={selectedList}\r\n          lists={lists} \r\n        />\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}