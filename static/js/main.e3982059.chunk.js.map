{"version":3,"sources":["components/ItemModal.js","components/TodoList.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["ItemModal","props","useState","todo","setTodo","modal","setModal","toggle","color","style","marginBottom","width","onClick","title","Modal","isOpen","ModalHeader","ModalBody","Form","onSubmit","e","preventDefault","addItem","FormGroup","Label","for","Input","type","name","id","placeholder","onChange","target","value","marginTop","block","TodoList","uuid","list","text","checked","items","setItems","openUpdateText","setOpenUpdateText","updateValue","setUpdateValue","updateItem","input","updates","map","item","handleFinished","closest","classList","handleCheckbox","margin","padding","ListGroup","TransitionGroup","className","selectedList","toLowerCase","CSSTransition","key","timeout","classNames","Item","dragobj","Button","variant","size","stopPropagation","filter","removeItem","toggleUpdateInput","lineHeight","onUpdateSubmit","handleUpdateValue","NavbarComponent","collapsed","setCollapsed","setList","Navbar","light","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","NavItem","textAlign","el","NavLink","borderBottom","marginRight","selectList","textContent","App","setSelectedList","console","log","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3982059.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input\r\n} from 'reactstrap';\r\n\r\n\r\nconst ItemModal = (props) => {\r\n  const [todo, setTodo] = useState('');\r\n  const [modal, setModal] = useState(false);\r\n\r\n  function toggle() {\r\n    setModal(!modal);\r\n  }\r\n\r\n  function onChange(e) {\r\n    setTodo(e.target.value);\r\n  }\r\n\r\n  function onSubmit(e) {\r\n    e.preventDefault();\r\n    props.addItem(todo);\r\n    toggle();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        color=\"dark\"\r\n        style={{ marginBottom: '2rem', width: \"100%\" }}\r\n        onClick={toggle}\r\n      >{props.title}</Button>\r\n\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggle}\r\n      >\r\n        <ModalHeader toggle={toggle}>{props.title}</ModalHeader>\r\n        <ModalBody>\r\n          <Form onSubmit={onSubmit}>\r\n            <FormGroup>\r\n              <Label for=\"todo\">Todo</Label>\r\n              <Input\r\n                type=\"todo\"\r\n                name=\"name\"\r\n                id=\"todo\"\r\n                placeholder={props.title}\r\n                onChange={onChange}\r\n              ></Input>\r\n              <Button\r\n                color=\"dark\"\r\n                style={{ marginTop: '2rem' }}\r\n                block\r\n              >{props.title}</Button>\r\n            </FormGroup>\r\n          </Form>\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ItemModal;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  ListGroup,\r\n  Button } from 'react-bootstrap';\r\nimport {\r\n  Input,\r\n  Form\r\n} from 'reactstrap';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport uuid from 'uuid';\r\n\r\nimport './styles.css';\r\nimport InputModal from './ItemModal';\r\n\r\nconst TodoList = (props) => {\r\n  const [items, setItems] = useState([\r\n    { id: uuid(), list: 'home', text: 'Buy eggs', checked: '' },\r\n    { id: uuid(), list: 'work', text: 'Invite friends over', checked: '' },\r\n    { id: uuid(), list: 'home', text: 'Pay bills', checked: '' },\r\n    { id: uuid(), list: 'work', text: 'Fix the TV', checked: '' },\r\n  ]);\r\n\r\n  const [openUpdateText, setOpenUpdateText] = useState('');\r\n  const [updateValue, setUpdateValue] = useState('');\r\n\r\n\r\n  function addItem(text) {\r\n    if (text) {\r\n      setItems(items => [...items, { id: uuid(), list: props.selectedList.toLowerCase(), text, checked: '' }]);\r\n    }\r\n  }\r\n\r\n  function removeItem(e, id) {\r\n    e.stopPropagation();\r\n    setItems(items =>\r\n      items.filter(item => item.id !== id)\r\n    )\r\n  }\r\n  \r\n  function handleUpdateValue(e) {\r\n    setUpdateValue(e.target.value);\r\n  }\r\n\r\n  function toggleUpdateInput(e, text, id) {\r\n    e.stopPropagation();\r\n    if (openUpdateText === '') \r\n    {\r\n      setUpdateValue(text)\r\n      setOpenUpdateText(id);\r\n    }\r\n    else if (openUpdateText === id) \r\n    {\r\n      setOpenUpdateText('');\r\n      updateItem(id, updateValue);\r\n      setOpenUpdateText('');\r\n      setUpdateValue('');\r\n    }\r\n    else \r\n    {\r\n      setOpenUpdateText(id);\r\n      setUpdateValue(text)\r\n    }\r\n  }\r\n\r\n  function updateItem(id, input) {\r\n    let updates = items.map(item => {\r\n      if(item.id === id) {\r\n        item.text = input;\r\n      }\r\n      return item;\r\n    });\r\n    setItems([...updates]);\r\n  }\r\n\r\n  function onUpdateSubmit(e, id) {\r\n    e.preventDefault();\r\n    updateItem(id, updateValue);\r\n    setOpenUpdateText('');\r\n    setUpdateValue('');\r\n  }\r\n\r\n  function handleCheckbox(id) {\r\n    let updates = items.map(item => {\r\n      if(item.id === id) {\r\n        item.checked = !item.checked;\r\n      }\r\n      return item;\r\n    });\r\n    setItems([...updates]);\r\n  }\r\n  \r\n  function handleFinished(e, id) {\r\n    e.closest(\".list-group-item\").classList.toggle(\"finished\")\r\n    handleCheckbox(id)\r\n  }\r\n\r\n  return (\r\n    <div style={{ margin: '2rem auto', padding: \"0 20px\"}}>\r\n      <ListGroup  style={{ marginBottom: '1rem' }}>\r\n        <TransitionGroup className=\"todo-list drag-container\">\r\n          {items.map(({ id, text, checked, list }) => {\r\n            if(props.selectedList.toLowerCase() !== list) {\r\n              return (null);\r\n            }\r\n            return (\r\n              <CSSTransition\r\n                key={id}\r\n                timeout={500}\r\n                classNames=\"item\"\r\n              > \r\n                <ListGroup.Item\r\n                  className=\"drag-box\"\r\n                  dragobj=\"0\"\r\n                  onClick={(e) => handleFinished(e.target, id)}\r\n                >\r\n\r\n                  {/* <CustomInput\r\n                    onChange={() => handleCheckbox(id)}\r\n                    checked={checked}\r\n                    type=\"checkbox\"\r\n                    id={`\"finish\"${id}`}\r\n                  /> */}\r\n                  \r\n                  <Button\r\n                    className=\"remove-btn\"\r\n                    variant=\"danger\"\r\n                    size=\"sm\"\r\n                    onClick={(e) => removeItem(e, id)}\r\n                  >\r\n                    <i className=\"material-icons\">delete</i>\r\n                  </Button>\r\n\r\n                  <Button\r\n                    variant=\"info\"\r\n                    size=\"sm\"\r\n                    onClick={(e) => toggleUpdateInput(e, text, id)}\r\n                  >\r\n                    <i className=\"material-icons\">edit</i>\r\n                  </Button>\r\n\r\n                  <span style={{ padding: \"0 30px\", lineHeight: \"2.4rem\"}}>{text}</span>\r\n\r\n                  {openUpdateText === id ?\r\n                  <Form\r\n                    className=\"form\"\r\n                    onSubmit={(e) => onUpdateSubmit(e, id)}\r\n                  >\r\n                    <Input\r\n                      value={updateValue}\r\n                      type=\"text\"\r\n                      name=\"todo\"\r\n                      placeholder=\"Update todo\"\r\n                      onChange={(e) => handleUpdateValue(e)}\r\n                    ></Input>\r\n                  </Form>\r\n                  : null}\r\n                  \r\n                </ListGroup.Item>\r\n              </CSSTransition>\r\n              )\r\n            }\r\n          )}\r\n        </TransitionGroup>\r\n      </ListGroup>\r\n\r\n      <InputModal\r\n        addItem={addItem}\r\n        title=\"Add todo\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { useState } from 'react';\r\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\r\nimport ItemModal from './ItemModal';\r\nimport uuid from 'uuid';\r\n\r\nconst NavbarComponent = (props) => {\r\n  const [collapsed, setCollapsed] = useState(true);\r\n  const [list, setList] = useState([{id: 1, title: 'Home'}, {id: 2, title: 'Work'}]);\r\n\r\n  function addItem(title) {\r\n    if (title) {\r\n      setList(items => [...items, { id: uuid(), title }]);\r\n    }\r\n  }\r\n\r\n  const toggleNavbar = () => setCollapsed(!collapsed);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"faded\" light>\r\n        <NavbarBrand className=\"mr-auto\">Todo List</NavbarBrand>\r\n        <div className=\"mr-2\">\r\n          <ItemModal\r\n            title=\"Add new list\"\r\n            addItem={addItem}\r\n          />\r\n        </div>\r\n        <NavbarToggler onClick={toggleNavbar} className=\"mr-2\"/>\r\n        <Collapse isOpen={!collapsed} navbar>\r\n          <Nav navbar>\r\n            <NavItem style={{textAlign: \"right\", marginTop: \"20px\"}}>\r\n              {list.map(el => {\r\n                return (\r\n                  <NavLink\r\n                  style={{borderBottom: '1px solid #ccc', marginRight: \"10px\"}}\r\n                  onClick={(e) => props.selectList(e.target.textContent)}\r\n                  key={el.id}\r\n                  >\r\n                  {el.title}\r\n                  </NavLink>\r\n                )\r\n              })}\r\n            </NavItem>\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavbarComponent;","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container } from 'reactstrap';\r\n\r\nimport TodoList from './components/TodoList';\r\nimport Navbar from './components/Navbar';\r\n\r\n\r\nfunction App() {\r\n  const [selectedList, setSelectedList] = useState('Home')\r\n  console.log(selectedList)\r\n  return (\r\n    <div className=\"App\">\r\n      <Container>\r\n        <Navbar selectList={setSelectedList}/>\r\n        <TodoList selectedList={selectedList}/>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}