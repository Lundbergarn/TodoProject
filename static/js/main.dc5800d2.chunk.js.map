{"version":3,"sources":["components/ItemModal.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["ItemModal","props","useState","todo","setTodo","modal","setModal","toggle","color","style","marginBottom","width","onClick","Modal","isOpen","ModalHeader","ModalBody","Form","onSubmit","e","preventDefault","addItem","FormGroup","Label","for","Input","type","name","id","placeholder","onChange","target","value","marginTop","block","TodoList","uuid","text","checked","items","setItems","openUpdateText","setOpenUpdateText","updateValue","setUpdateValue","updateItem","input","updates","map","item","handleFinished","classList","handleCheckbox","margin","ListGroup","TransitionGroup","className","CSSTransition","key","timeout","classNames","Item","dragobj","Button","variant","size","stopPropagation","filter","removeItem","toggleUpdateInput","padding","lineHeight","onUpdateSubmit","handleUpdateValue","App","Container","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc5800d2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input\r\n} from 'reactstrap';\r\n\r\n\r\nconst ItemModal = (props) => {\r\n  const [todo, setTodo] = useState('');\r\n  const [modal, setModal] = useState(false);\r\n\r\n  function toggle() {\r\n    setModal(!modal);\r\n  }\r\n\r\n  function onChange(e) {\r\n    setTodo(e.target.value);\r\n  }\r\n\r\n  function onSubmit(e) {\r\n    e.preventDefault();\r\n    props.addItem(todo);\r\n    toggle();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        color=\"dark\"\r\n        style={{ marginBottom: '2rem', width: \"100%\" }}\r\n        onClick={toggle}\r\n      >Add Todo</Button>\r\n\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggle}\r\n      >\r\n        <ModalHeader toggle={toggle}>Add Todo</ModalHeader>\r\n        <ModalBody>\r\n          <Form onSubmit={onSubmit}>\r\n            <FormGroup>\r\n              <Label for=\"todo\">Todo</Label>\r\n              <Input\r\n                type=\"todo\"\r\n                name=\"name\"\r\n                id=\"todo\"\r\n                placeholder=\"Add todo\"\r\n                onChange={onChange}\r\n              ></Input>\r\n              <Button\r\n                color=\"dark\"\r\n                style={{ marginTop: '2rem' }}\r\n                block\r\n              >Add Todo</Button>\r\n            </FormGroup>\r\n          </Form>\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ItemModal;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  ListGroup,\r\n  Button } from 'react-bootstrap';\r\nimport {\r\n  Input,\r\n  Form\r\n} from 'reactstrap';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport uuid from 'uuid';\r\n\r\nimport './styles.css';\r\nimport InputModal from './ItemModal';\r\n\r\nconst TodoList = () => {\r\n  const [items, setItems] = useState([\r\n    { id: uuid(), text: 'Buy eggs', checked: '' },\r\n    { id: uuid(), text: 'Pay bills', checked: '' },\r\n    { id: uuid(), text: 'Invite friends over', checked: '' },\r\n    { id: uuid(), text: 'Fix the TV', checked: '' },\r\n  ]);\r\n\r\n  const [openUpdateText, setOpenUpdateText] = useState('');\r\n  const [updateValue, setUpdateValue] = useState('');\r\n\r\n\r\n  function addItem(text) {\r\n    if (text) {\r\n      setItems(items => [...items, { id: uuid(), text }]);\r\n    }\r\n  }\r\n\r\n  function removeItem(e, id) {\r\n    e.stopPropagation();\r\n    setItems(items =>\r\n      items.filter(item => item.id !== id)\r\n    )\r\n  }\r\n  \r\n  function handleUpdateValue(e) {\r\n    setUpdateValue(e.target.value);\r\n  }\r\n\r\n  function toggleUpdateInput(e, text, id) {\r\n    e.stopPropagation();\r\n    if (openUpdateText === '') \r\n    {\r\n      setUpdateValue(text)\r\n      setOpenUpdateText(id);\r\n    }\r\n    else if (openUpdateText === id) \r\n    {\r\n      setOpenUpdateText('');\r\n      updateItem(id, updateValue);\r\n      setOpenUpdateText('');\r\n      setUpdateValue('');\r\n    }\r\n    else \r\n    {\r\n      setOpenUpdateText(id);\r\n      setUpdateValue(text)\r\n    }\r\n  }\r\n\r\n  function updateItem(id, input) {\r\n    let updates = items.map(item => {\r\n      if(item.id === id) {\r\n        item.text = input;\r\n      }\r\n      return item;\r\n    });\r\n    setItems([...updates]);\r\n  }\r\n\r\n  function onUpdateSubmit(e, id) {\r\n    e.preventDefault();\r\n    updateItem(id, updateValue);\r\n    setOpenUpdateText('');\r\n    setUpdateValue('');\r\n  }\r\n\r\n  function handleCheckbox(id) {\r\n    let updates = items.map(item => {\r\n      if(item.id === id) {\r\n        item.checked = !item.checked;\r\n      }\r\n      return item;\r\n    });\r\n    setItems([...updates]);\r\n  }\r\n  \r\n  function handleFinished(e, id) {\r\n    e.classList.toggle(\"finished\")\r\n    handleCheckbox(id)\r\n  }\r\n\r\n  return (\r\n    <div style={{ margin: '2rem auto'}}>\r\n      <ListGroup  style={{ marginBottom: '1rem' }}>\r\n        <TransitionGroup className=\"todo-list drag-container\">\r\n          {items.map(({ id, text, checked }) => (\r\n            <CSSTransition\r\n              key={id}\r\n              timeout={500}\r\n              classNames=\"item\"\r\n            > \r\n              <ListGroup.Item\r\n                className=\"drag-box\"\r\n                dragobj=\"0\"\r\n                onClick={(e) => handleFinished(e.target, id)}\r\n              >\r\n\r\n                {/* <CustomInput\r\n                  onChange={() => handleCheckbox(id)}\r\n                  checked={checked}\r\n                  type=\"checkbox\"\r\n                  id={`\"finish\"${id}`}\r\n                /> */}\r\n          \r\n                <Button\r\n                  className=\"remove-btn\"\r\n                  variant=\"danger\"\r\n                  size=\"sm\"\r\n                  onClick={(e) => removeItem(e, id)}\r\n                >\r\n                  <i className=\"material-icons\">delete</i>\r\n                </Button>\r\n\r\n                <Button\r\n                  variant=\"info\"\r\n                  size=\"sm\"\r\n                  onClick={(e) => toggleUpdateInput(e, text, id)}\r\n                >\r\n                  <i className=\"material-icons\">edit</i>\r\n                </Button>\r\n\r\n                <span style={{padding: \"0 30px\", lineHeight: \"2.4rem\"}}>{text}</span>\r\n\r\n                {openUpdateText === id ?\r\n                <Form\r\n                  className=\"form\"\r\n                  onSubmit={(e) => onUpdateSubmit(e, id)}\r\n                >\r\n                  <Input\r\n                    value={updateValue}\r\n                    type=\"text\"\r\n                    name=\"todo\"\r\n                    placeholder=\"Update todo\"\r\n                    onChange={(e) => handleUpdateValue(e)}\r\n                  ></Input>\r\n                </Form>\r\n                : null}\r\n                \r\n              </ListGroup.Item>\r\n            </CSSTransition>\r\n          ))}\r\n        </TransitionGroup>\r\n      </ListGroup>\r\n\r\n      <InputModal\r\n        addItem={addItem}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport TodoList from './components/TodoList';\r\nimport { Container } from 'reactstrap';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Container>\r\n        {<h1 style={{textAlign: \"center\", marginTop: \"20px\"}}>TodoList</h1>}\r\n        <TodoList />\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}